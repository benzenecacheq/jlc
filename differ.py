#!/usr/bin/env python3
"""
Differ - Compare SKU assignments between two CSV files from viewer.py

This program compares two CSV files generated by viewer.py and shows differences
in SKU assignments. It handles items with multiple matches and displays
side-by-side comparisons for items where SKUs differ.
"""

import csv
import os
import sys
import argparse
from pathlib import Path
from typing import Dict, List, Tuple, Set
from collections import defaultdict

class CSVItem:
    """Represents a single item from the CSV file"""
    def __init__(self, item_number: str, quantity: str, text: str):
        self.item_number = item_number
        self.quantity = quantity
        self.text = text
        self.matches: List[Dict[str, str]] = []
    
    def add_match(self, sku: str, description: str, confidence: str):
        """Add a match to this item"""
        if "| Attr: " in description:
            attr = description[description.find("| Attr: ") + 8:]
            if " | components" in attr:
                attr = attr[:attr.find(" | components")]
        else:
            attr = ""

        if '|' in description:
            description = description[:description.find('|')]
        self.matches.append({
            'sku': sku.strip(),
            'description': description.strip(),
            'type': attr.strip(),
            'confidence': confidence.strip()
        })
    
    def get_sku_set(self) -> Set[str]:
        """Get set of all SKUs for this item"""
        return {match['sku'] for match in self.matches if match['sku']}
    
    def has_differences(self, other: 'CSVItem') -> bool:
        """Check if this item has different SKUs compared to another item"""
        return self.get_sku_set() != other.get_sku_set()

class CSVParser:
    """Parser for CSV files generated by viewer.py"""
    
    def __init__(self, filename: str):
        self.filename = filename
        self.items: Dict[str, CSVItem] = {}
    
    def parse(self) -> Dict[str, CSVItem]:
        """Parse the CSV file and return items grouped by item number"""
        try:
            with open(self.filename, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                prev_item_number = 0
                
                for row in reader:
                    item_number = row.get('Item_Number', '').strip()
                    quantity = row.get('Quantity', '').strip()
                    text = row.get('Description', '').strip()
                    sku = row.get('Part_Number', '').strip()
                    description = row.get('Database_Description', '').strip()
                    confidence = row.get('Confidence', '').strip()
                    
                    # Skip empty rows
                    if not item_number:
                        continue
                    
                    # Create new item or get existing one
                    if item_number not in self.items:
                        self.items[item_number] = CSVItem(item_number, quantity, text)
                    
                    # Add the match if SKU is present
                    if sku:
                        self.items[item_number].add_match(sku, description, confidence)
                
                return self.items
                
        except FileNotFoundError:
            print(f"Error: File not found: {self.filename}")
            sys.exit(1)
        except Exception as e:
            print(f"Error parsing {self.filename}: {e}")
            sys.exit(1)

class Differ:
    """Main differ class that compares two CSV files"""
    
    def __init__(self, left_file: str, right_file: str):
        self.left_file = left_file
        self.right_file = right_file
        self.left_items: Dict[str, CSVItem] = {}
        self.right_items: Dict[str, CSVItem] = {}
    
    def load_files(self):
        """Load and parse both CSV files"""
        # print(f"Loading left file: {self.left_file}")
        left_parser = CSVParser(self.left_file)
        self.left_items = left_parser.parse()
        
        # print(f"Loading right file: {self.right_file}")
        right_parser = CSVParser(self.right_file)
        self.right_items = right_parser.parse()
        
        # print(f"Left file: {len(self.left_items)} items")
        # print(f"Right file: {len(self.right_items)} items")
    
    def find_differences(self) -> List[Tuple[str, CSVItem, CSVItem]]:
        """Find items that have different SKUs between the two files"""
        differences = []
        
        # Get all item numbers from both files
        all_items = set(self.left_items.keys()) | set(self.right_items.keys())
        
        for item_number in sorted(all_items, key=lambda x: int(x) if x.isdigit() else float('inf')):
            left_item = self.left_items.get(item_number)
            right_item = self.right_items.get(item_number)
            
            # If item exists in both files, check for differences
            if left_item and right_item:
                if left_item.has_differences(right_item):
                    differences.append((item_number, left_item, right_item))
            # If item exists in only one file, it's a difference
            elif left_item or right_item:
                differences.append((item_number, left_item, right_item))
        
        return differences
    
    def format_output(self, left_file_name, right_file_name, differences: List[Tuple[str, CSVItem, CSVItem]]):
        """Format and display the differences"""
        if not differences:
            print(f"No differences found between the {left_file_name} and {right_file_name}.")
            return
        
        print(f"{'='*152}")
        
        # left_file.csv                                                              | right_file.csv
        print(f"{left_file_name:<75}| {right_file_name:<74}|")

        # 38CDX      | 11/32 4X8 CDX PLY                   | cdx        | Conf: 0.72 |
        def get_match_text(match):
            return (f"{match['sku']:<10} | {match['description'][:35]:<35} | {match['type'][:10]:<10} | "
                    f"Conf: {float(match['confidence']):.2f}")

        for item_number, left_item, right_item in differences:
            print('-'*75 + '+' + '-'*75 + '+')
            print(f"-- Item {item_number + ':':<8}| "
                  f"Qty: {(left_item.quantity if left_item else right_item.quantity):<11} | "
                  f"{(left_item.text if left_item else right_item.text)[:35]:<35} "
                  f"--+{75*'-'}+")
            print('-'*75 + '+' + '-'*75 + '+')
            
            for i in range(max(len(left_item.matches), len(right_item.matches))):
               left = get_match_text(left_item.matches[i]) if i < len(left_item.matches) else (" "*74)
               right = get_match_text(right_item.matches[i]) if i < len(right_item.matches) else (" "*74)
               print(f"{left} | {right}|")
        print(f"{'='*152}")

def main():
    """Main function"""
    parser = argparse.ArgumentParser(
        description="Compare SKU assignments between two CSV files from viewer.py",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python differ.py file1.csv file2.csv
  python differ.py --left results1.csv --right results2.csv
        """
    )
    
    parser.add_argument('files', nargs='*', help='Two CSV files to compare (left and right)')
    parser.add_argument('--left', '-l', help='Left CSV file')
    parser.add_argument('--right', '-r', help='Right CSV file')
    
    args = parser.parse_args()
    
    # Determine left and right files
    left_file = None
    right_file = None
    
    if args.left and args.right:
        left_file = args.left
        right_file = args.right
    elif len(args.files) == 2:
        left_file = args.files[0]
        right_file = args.files[1]
    else:
        print("Error: Please provide exactly two CSV files to compare.")
        print("Usage: python differ.py file1.csv file2.csv")
        print("   or: python differ.py --left file1.csv --right file2.csv")
        sys.exit(1)
    
    # Validate files exist
    if not Path(left_file).exists():
        print(f"Error: Left file does not exist: {left_file}")
        sys.exit(1)
    
    if not Path(right_file).exists():
        print(f"Error: Right file does not exist: {right_file}")
        sys.exit(1)
    
    # Create differ and run comparison
    differ = Differ(left_file, right_file)
    differ.load_files()
    
    differences = differ.find_differences()
    differ.format_output(left_file, os.path.basename(right_file), differences)
   
    if False: # len(differences):
        print(f"Summary: Found {len(differences)} items with differences\n")

if __name__ == "__main__":
    main()



